# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Self-hosted
  
jobs:
- job: echo_message
  displayName: 'Echo Message'
  pool:
    name: 'Self-hosted'
  steps:
  - script: |
      echo "Starting the SAST scan job..."
    displayName: 'Echo Message'

- job: sast_scan
  displayName: 'Run Bandit Scan'
  pool:
    name: 'Self-hosted'
  steps:
  - script: |
      export NODE_TLS_REJECT_UNAUTHORIZED=0
    displayName: 'Disable SSL Verification'

  - script: |
      export PATH=$PATH:/usr/local/bin/python3.13:/Library/Frameworks/Python.framework/Versions/3.13/bin
      python3.13 -V
      python3.13 -m pip install --upgrade pip
      python3.13 -m pip --version
    displayName: 'Set up Python 3.13.1 and pip'

  - script: |
      source ~/myagent/_work/_tool/Python/3.13.1/x64/bin/activate
      bandit --version
      deactivate
    displayName: 'Verify Bandit Installation'

  - script: |
      source ~/myagent/_work/_tool/Python/3.13.1/x64/bin/activate
      bandit -ll -ii -r . -f json -o bandit-report.json
      deactivate
    displayName: 'Run Bandit Scan'


  - task: PublishBuildArtifacts@1
    displayName: 'Upload Artifact'
    inputs:
      PathtoPublish: 'bandit-report.json'
      ArtifactName: 'bandit-findings'
      publishLocation: 'Container'


- job: Defectdojo_import_report
  dependsOn: sast_scan
  variables:
    DEFECTDOJO_SCAN_ENVIRONMENT: "Development"
    DEFECTDOJO_SCAN_TEST_TYPE: "SAST Scan"
    DEFECTDOJO_PRODUCT: "Test Dashboard"
    DEFECTDOJO_PRODUCT_TYPE: "Research and Development
    DEFECTDOJO_ENGAGEMENT_NAME: "pygoat-github"
  steps:
  - script: |
      python3.13 -m pip install defectdojo_api
    displayName: 'Install DefectDojo API'

  # - script: |
  #     python3.13 -c "
  #     from defectdojo_api import defectdojo_api;
  #     defectdojo_api.main(
  #       url='172.210.46.36:8080/',
  #       username='$(DEFECTDOJO_USER)',
  #       password='$(DEFECTDOJO_PASS)',
      
  #       file='bandit-report.json'
  #     )"

  - task: CmdLine@2
  inputs:
    script: |
      TODAY=`date +%Y-%m-%d`
      ENGAGEMENTID=`cat ENGAGEMENTID.env`
      array=('type=("Dependency Check Scan" "SARIF" "Bandit Scan")' 'file=("dependency-check-report/dependency-check-report.json" "image-scan-report/image-scan-report.json" "bandit-report/sast-report.json")')
      for elt in "${array[@]}";do eval $elt;done
      for scan in 0 1 2; do \
        curl --fail --location --request POST "$(DEFECTDOJO_URL)/import-scan/" \
          --header "Authorization: Token $(DEFECTDOJO_TOKEN)" \
          --form "scan_date=${TODAY}" \
          --form "scan_type=${type[$scan]}" \
          --form "engagement=${ENGAGEMENTID}" \
          --form "file=@$(Pipeline.Workspace)/${file[$scan]}" \
          --form "test_type=$(DEFECTDOJO_SCAN_TEST_TYPE)" \
          --form "environment=$(DEFECTDOJO_SCAN_ENVIRONMENT)"
      done
    displayName: 'Upload Reports To DefectDojo'
    condition: always()

  # - task: UsePythonVersion@0 
  #   displayName: 'Set up Python'
  #   inputs:
  #     versionSpec: '3.13.1'
  #     addToPath: true
  #     disableDownloadFromRegistry: true

